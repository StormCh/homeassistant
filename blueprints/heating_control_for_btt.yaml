blueprint:
  name: Heating Control for BT Thermostats
  description: >
    # Heating Control for BT Thermostats

    **Version 0.10.2**

  domain: automation
  source_url: https://github.com/StormCh/homeassistant/blob/main/blueprints/heating_control_for_btt.yaml
  input:
    date_from:
      name: Month from
      description: (Required) Select date to start heating period. For example X. October, using October as Startdate.
      selector:
        date:

    date_to:
      name: Month to
      description: (Required) Select date to end heating period. For example Y. March, using April as Enddate.
      selector:
        date:

    input_persons:
      name: Person at home
      description: (Required) Presence, start heating only if someone (one of there persons) is at home.
      default: []
      selector:
        entity:
          filter:
            - domain: person
          multiple: true

    bt_times_schedule:
      name: Scheduler
      description: (Required) Used Scheduler. Scheduler can be added in the helpers section in your home assistant settings.
      selector:
        entity:
          domain: schedule

    thermostat_target:
      name: Thermostats
      description: (Required) Choose the thermostats to be used for heating. Choose Entity (not Device).
      selector:
        target:
          #device:
          #  integration: better_thermostat
          entity:
            integration: better_thermostat
            domain: climate
      #selector:
      #  entity:
      #    filter:
      #      - domain:
      #          - climate
      #    multiple: true
      

    set_bt_temp:
      name: Target Temperature
      description: Set the heating target temperature.
      default: 20
      selector:
        number:
          min: 5
          max: 30
          step: 0.5
          unit_of_measurement: °C

    sensor_control:
      name: Sensor Control
      description: (Required) External temperature sensor. If temp is higher than target temperature, then disable thermostat.
      selector:
        entity:
          filter:
            - domain:
                - sensor
              device_class:
                - temperature
          multiple: false

    set_bt_temp_after:
      name: Reset Temperature
      description: Reset the temperature after heating.
      default: 18
      selector:
        number:
          min: 5
          max: 30
          step: 0.5
          unit_of_measurement: °C

    timer_helper:
      name: Boost Timer
      description: Required. Timer can be added in the helpers section in your home assistant settings.
      selector:
        entity:
          domain: timer

    set_boost_bt_temp:
      name: Set Boost Temperature
      description: Set the heating boost temperature.
      default: 30
      selector:
        number:
          min: 5
          max: 30
          step: 0.5
          unit_of_measurement: °C

mode: queued
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input bt_times_schedule
    from: "on"
    to: "off"
  - platform: state
    entity_id: !input bt_times_schedule
    from: "off"
    to: "on"
  - platform: state
    entity_id: !input sensor_control
  - platform: state
    entity_id: !input input_persons
  - platform: state
    entity_id: !input timer_helper
    to: "active"
    id: "to_active"
  - platform: state
    entity_id: !input timer_helper
    to: "idle"
    id: "to_idle"

condition: []

action:
  - variables:
      var_date_from: !input date_from
      var_date_to: !input date_to
      var_bt_times_schedule: !input bt_times_schedule
      var_input_persons: !input input_persons
      var_thermostat_target: !input thermostat_target
      var_set_bt_temp: !input set_bt_temp
      var_set_bt_temp_after: !input set_bt_temp_after
      var_sensor_control: !input sensor_control
      var_timer_helper: !input timer_helper
      var_is_anybody_home: "{{ expand( var_input_persons ) | selectattr('state', 'eq', 'home') | list | count > 0 }}"
      var_date_from_month: "{{ ( var_date_from | as_datetime ).month }}"
      var_date_from_day: "{{ ( var_date_from | as_datetime ).day }}"
      var_date_to_month: "{{ ( var_date_to | as_datetime ).month }}"
      var_date_to_day: "{{ ( var_date_to | as_datetime ).day }}"
      #var_set_temperature: >-
      #  {% if var_thermostat_target[entity_id].lower is defined %}
      #    {{ state_attr( var_thermostat_target[entity_id] | default , 'temperature' ) | float(0) }}
      #  {% else %}
      #    {{ state_attr( var_thermostat_target[entity_id][0] | default , 'temperature' ) | float(0) }}
      #  {% endif %}

  - if: #trigger to idle reset to after temp
      - condition: trigger
        id: "to_idle"
    then:
      - service: climate.set_hvac_mode
        data:
          hvac_mode: heat
        target: !input thermostat_target
      - service: better_thermostat.set_temp_target_temperature
        data:
          temperature: !input set_bt_temp_after
        target: !input thermostat_target

  - if: #trigger to active set to set temp
      - condition: trigger
        id: "to_active"
    then:
      - service: climate.set_hvac_mode
        data:
          hvac_mode: heat
        target: !input thermostat_target
      - service: better_thermostat.set_temp_target_temperature
        data:
          temperature: !input set_boost_bt_temp
        target: !input thermostat_target

  - if:
      - condition: template # is current date between date_from and date_to
        value_template: "{{ now().month >= var_date_from_month or now().month <= var_date_to_month }}"
      - condition: state # and selected schedule turns to on
        entity_id: !input bt_times_schedule
        state: "on"
      - condition: template # and is anybody at home
        value_template: "{{ var_is_anybody_home == true }}"
      - condition: state # boost timer is not active
        entity_id: !input timer_helper
        state: idle

    then:
      - if: # if temperature of sensor is above target temperature
        - condition: numeric_state
          entity_id: !input sensor_control
          above: !input set_bt_temp #var_set_temperature #
        #- condition: template
        #  value_template: "{{ states( var_sensor_control ) | float(0) > var_set_temperature }}" #sensor temp is above current thermostat temp
        then: # set thermostate to off
          - service: better_thermostat.set_temp_target_temperature
            data:
              temperature: !input set_bt_temp_after
            target: !input thermostat_target
          - delay:
              hours: 0
              minutes: 1
              seconds: 0
              milliseconds: 0
          - service: climate.set_hvac_mode
            data:
              hvac_mode: "off"
            target: !input thermostat_target
        else: # set thermostate to heat and set target temperature
          - service: climate.set_hvac_mode
            data:
              hvac_mode: heat
            target: !input thermostat_target
          - service: better_thermostat.set_temp_target_temperature
            data:
              temperature: !input set_bt_temp
            target: !input thermostat_target

    else:
      - if:
        - condition: state  # boost timer is idle
          entity_id: !input timer_helper
          state: idle
        then:
          - service: better_thermostat.set_temp_target_temperature # reset temperature
            data:
              temperature: !input set_bt_temp_after
            target: !input thermostat_target

          - if: # if temperature of sensor is above target temperature
            - condition: numeric_state
              entity_id: !input sensor_control
              above: !input set_bt_temp_after #set_temperature #
            #- condition: template
            #  value_template: "{{ states( var_sensor_control ) | float(0) > var_set_temperature }}" #sensor temp is above current thermostat temp
            then:
              - service: better_thermostat.set_temp_target_temperature
                data:
                  temperature: !input set_bt_temp_after
                target: !input thermostat_target
              - delay:
                  hours: 0
                  minutes: 1
                  seconds: 0
                  milliseconds: 0
              - service: climate.set_hvac_mode
                data:
                  hvac_mode: "off"
                target: !input thermostat_target
            else:
              - service: climate.set_hvac_mode
                data:
                  hvac_mode: heat
                target: !input thermostat_target
              - service: better_thermostat.set_temp_target_temperature
                data:
                  temperature: !input set_bt_temp_after
                target: !input thermostat_target
        else: # timer boost active

