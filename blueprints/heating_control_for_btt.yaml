blueprint:
  name: Heating Control Schedule for BT Thermostats
  description: >
    # Heating Control Schedule for BT Thermostats

    **Version 0.8.0**

    ## How it works

    Heating control blueprint for BT Thermostats if Schedule event is active. Scheduler can be added in the helpers section in your home assistant settings.
    
    ### Basic function

      * current date must be in between *date from* and *date to*. Year is ignored.
      * runs only if someone is at home, uses *Person at home*
      * switch HVAC_Mode to *heat* and Temperature to *Set Temperature value* when schedule begins and reset to *Reset Temperatur value* when schedule ends.

    Required = *

  domain: automation
  source_url: https://github.com/StormCh/homeassistant/blob/main/blueprints/heating_control_for_btt.yaml
  input:
    date_from:
      name: Month from *
      description: (Required) Select date to start heating period. For example X. October, using October as Startdate.
      selector:
        date:

    date_to:
      name: Month to *
      description: (Required) Select date to end heating period. For example Y. March, using March as Enddate.
      selector:
        date:

    input_persons:
      name: Person at home *
      description: (Required) Presence, start heating only if someone (one of there persons) is at home.
      default: []
      selector:
        entity:
          filter:
            - domain: person
          multiple: true

    bt_times_schedule:
      name: Scheduler *
      description: (Required) Used Scheduler. Scheduler can be added in the helpers section in your home assistant settings.
      selector:
        entity:
          domain: schedule

    thermostat_target:
      name: Thermostats *
      description: (Required) Choose the thermostats to be used for heating.
      selector:
        target:
          device:
            integration: better_thermostat
          entity:
            integration: better_thermostat
            domain: climate

    set_bt_temp:
      name: Set Target Temperature
      description: Set the heating target temperature.
      default: 20
      selector:
        number:
          min: 5
          max: 30
          step: 0.5
          unit_of_measurement: °C

    sensor_control:
      name: Sensor Control *
      description: (Required) If temperature of sensor is higher than target temperatur, then disable thermostat.
      selector:
        entity:
          filter:
            - domain:
                - sensor
              device_class:
                - temperature
          multiple: false

    set_bt_temp_after:
      name: Reset Temperature
      description: Reset the temperature after heating.
      default: 18
      selector:
        number:
          min: 5
          max: 30
          step: 0.5
          unit_of_measurement: °C

    timer_helper:
      name: Timer *
      description: (Required) Associated Boost Timer.
      selector:
        entity:
          domain: timer

mode: queued
max_exceeded: silent

variables:
  date_from: !input date_from
  date_to: !input date_to
  bt_times_schedule: !input bt_times_schedule
  input_persons: !input input_persons
  thermostat_target: !input thermostat_target
  set_bt_temp: !input set_bt_temp
  set_bt_temp_after: !input set_bt_temp_after
  sensor_control: !input sensor_control
  timer_helper: !input timer_helper

trigger:
  - platform: state
    entity_id: !input bt_times_schedule
    from: "on"
    to: "off"
  - platform: state
    entity_id: !input bt_times_schedule
    from: "off"
    to: "on"
  - platform: state
    entity_id: !input sensor_control

condition: []

action:
  - variables:
      is_anybody_home: "{{ expand( input_persons ) | selectattr('state', 'eq', 'home') | list | count > 0 }}"
      date_from_month: "{{ (date_from | as_datetime).month }}"
      date_from_day: "{{ (date_from | as_datetime).day }}"
      date_to_month: "{{ (date_to | as_datetime).month }}"
      date_to_day: "{{ (date_to | as_datetime).day }}"
      # set_temperature: "{{ state_attr( thermostat_target[0] , 'temperature' ) | float(0) }}"
  - if:
      - condition: template # is current date between date_from and date_to
        #value_template: "{{ (now().year,date_from_month,date_from_day) <= ( now().year, now().month, now().day) <= (now().year+1,date_to_month,date_to_day) }}"
        value_template: "{{ now().month >= date_from_month or now().month <= date_to_month }}"
      - condition: state # and selected schedule turns to on
        entity_id: !input bt_times_schedule
        state: "on"
      - condition: template # and is anybody at home
        value_template: "{{ is_anybody_home == true }}"
      - condition: state # boost timer is not active
        entity_id: !input timer_helper
        state: idle
    then:
      - if: # if temperature of sensor is above target temperature
        #- condition: numeric_state
        #  entity_id: !input sensor_control
        #  above: !input set_bt_temp #set_temperature #
        - condition: template
          value_template: "{{ states( sensor_control ) | float(0) > state_attr( thermostat_target[0] | default , 'temperature' ) | float(0) }}" #sensor temp is above current thermostat temp
        then: # set thermostate to off
          - service: climate.set_hvac_mode
            data:
              hvac_mode: "off"
            target: !input thermostat_target
        else: # set thermostate to heat and set target temperature
          - service: climate.set_hvac_mode
            data:
              hvac_mode: heat
            target: !input thermostat_target
          - service: better_thermostat.set_temp_target_temperature
            data:
              temperature: !input set_bt_temp
            target: !input thermostat_target
    else:
      - if:
        - condition: state  # boost timer is not active
          entity_id: !input timer_helper
          state: idle
        then:
          - if: # if temperature of sensor is above target temperature
            #- condition: numeric_state
            #  entity_id: !input sensor_control
            #  above: !input set_bt_temp #set_temperature #
            - condition: template
              value_template: "{{ states( sensor_control ) | float(0) > state_attr( thermostat_target[0] | default , 'temperature' ) | float(0) }}" #sensor temp is above current thermostat temp
            then:
              - service: climate.set_hvac_mode
                data:
                  hvac_mode: "off"
                target: !input thermostat_target
            else:
              - service: climate.set_hvac_mode
                data:
                  hvac_mode: heat
                target: !input thermostat_target
              - service: better_thermostat.set_temp_target_temperature
                data:
                  temperature: !input set_bt_temp_after
                target: !input thermostat_target
        else:

